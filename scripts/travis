#!/usr/bin/env bash

# Travis utilities.
#
# This is mostly useful to help us handle the multiple NPM packages hosted in
# this repository.
#
# Usage:
#   travis (install|test)

set -o nounset
set -o errexit
set -o pipefail
shopt -s nullglob

__dirname="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Checks whether a package is compatible with the current node version.
#
# Usage: supported_engine path/to/package
#
# The function will return 0 if the engine is supported and 1 otherwise. The
# package directory should contain a `package.json` with its `engines.node`
# field set to a "greater than" value (e.g. `>=7`).
supported_engine() {
  local active="$(node --version | tr -cd '.0-9')"
  local requirement="$(jq -r <"$1/package.json" .engines.node)"
  if [[ ! $requirement =~ ^\>=[0-9.]+$ ]]; then
    fail "unsupported requirement: $requirement"
  fi
  local required="${requirement:2}" # Strip leading `>=`.
  local oldest="$(echo -e "$active\n$required" | sort -ruV | tail -n +2)"
  [[ $oldest == $active ]] && return 1 || return 0
}

run_install() {
  echo 'Installing all packages...'
  cd "$__dirname/../packages"
  for dname in *; do
    if supported_engine "$dname"; then
      (
        echo "Installing $dname."
        cd "$dname"
        npm install
        # Versions of node <10 don't support the latest mocha.
        node -e 'import(".").catch(() => {});' 2>/dev/null || npm i mocha@~7.1.0
        # Versions of node <8 require even older dependencies.
        node -e 'const a = {}; const b = {...a};' 2>/dev/null || npm i mocha@~3.5.3 tmp@~0.0.33
      )
    else
      echo "Skipping $dname, it requires a different engine."
    fi
  done
  echo 'Done installing packages.'
}

run_test() {
  echo 'Testing all packages...'
  cd "$__dirname/../packages"
  local failed=false
  set +o errexit
  for dname in *; do
    cd "$dname"
    if [[ ! -d node_modules ]]; then
      echo "Skipping $dname, it was not installed."
    else
      if (( "${AVRO_COVERAGE:-0}" )); then
        npm run coverAndPublish
      else
        npm test
      fi
      if (($?)); then
        echo "Tests for ${dname} failed."
        failed=true
      else
        echo "Tests for ${dname} OK."
      fi
    fi
    cd ..
  done
  set -o errexit
  if "$failed"; then
    fail 'At least one test failed.'
  else
    echo 'All tests succeeded!'
  fi
}

fail() {
  echo "$1" >&2 && exit 2
}

main() {
  if (($# == 0)); then
    fail 'missing command'
  fi
  case "$1" in
    install)
      run_install
      ;;
    test)
      run_test
      ;;
    *)
      fail "unknown command: $1"
  esac
}

main "$@"
